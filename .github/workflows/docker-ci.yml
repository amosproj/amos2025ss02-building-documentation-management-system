name: Start default web service

on:
  push:
    branches:
      - main_cleanup

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build and Push Backend
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/backend
      #     file: ./BitAndBeam/backend/Dockerfile
      #     push: true
      #     tags: ghcr.io/amosproj/bitandbeam-backend:latest

      # - name: Build and Push Frontend
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/frontend
      #     file: ./BitAndBeam/frontend/Dockerfile
      #     push: true
      #     tags: ghcr.io/amosproj/bitandbeam-frontend:latest

      # - name: Build and Push Web
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/web
      #     file: ./BitAndBeam/web/Dockerfile
      #     push: true
      #     tags: ghcr.io/amosproj/bitandbeam-web:latest

      # - name: Add known hosts
      #   run: |
      #     mkdir -p ~/.ssh
      #     ssh-keyscan -H ${{ secrets.PROJECT_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Show workspace structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing all files and folders:"
          ls -alR
      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROJECT_SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd BitAndBeam

            # Log in to GHCR
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images using the prod compose file
            docker-compose -f docker-compose-prod.yml pull

            # Recreate containers using the prod compose file
            docker-compose -f docker-compose-prod.yml down
            docker-compose -f docker-compose-prod.yml up -d
