name: Start default web service

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0      # ← fetch all history so “before” commit exists locally

      # ---------------- detect BitAndBeam changes ----------------
      - name: Check if BitAndBeam folder changed
        id: changed
        run: |
          BEFORE_SHA="${{ github.event.before }}"

          echo "Comparing $BEFORE_SHA … ${{ github.sha }}"

          if [ "$BEFORE_SHA" != "" ] && git diff --name-only "$BEFORE_SHA" "${{ github.sha }}" | grep -q '^BitAndBeam/'; then
            echo "changed=true"  >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push frontend image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/frontend
      #     push: true
      #     tags: |
      #       ghcr.io/amosproj/bitandbeam-frontend:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # - name: Build and push backend image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/backend
      #     push: true
      #     tags: |
      #       ghcr.io/amosproj/bitandbeam-backend:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # - name: Build and push ollama image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/ollama
      #     push: true
      #     tags: |
      #       ghcr.io/amosproj/bitandbeam-ollama:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # - name: Build and push web image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./BitAndBeam/web
      #     push: true
      #     tags: |
      #       ghcr.io/amosproj/bitandbeam-web:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: Upload project to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PROJECT_SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "BitAndBeam"
          target: "~/"

      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v1.0.0
        env:
          BB_CHANGED: ${{ steps.changed.outputs.changed }}
        with:
          host: ${{ secrets.PROJECT_SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/BitAndBeam

            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Stop running stack
            docker compose -f docker-compose-prod.yml down

            # --- remove old images ONLY when BitAndBeam folder changed ---
            if [ "${BB_CHANGED}" = "true" ]; then
              echo "BitAndBeam changed – removing old images."
              docker rmi ghcr.io/amosproj/bitandbeam-frontend:latest || true
              docker rmi ghcr.io/amosproj/bitandbeam-backend:latest || true
              docker rmi ghcr.io/amosproj/bitandbeam-ollama:latest || true
              docker rmi ghcr.io/amosproj/bitandbeam-web:latest || true
            else
              echo "BitAndBeam unchanged – keeping existing images."
            fi

            # Always pull (gets newer tags even if source didn’t change)
            docker compose -f docker-compose-prod.yml pull

            # Relaunch stack
            docker compose -f docker-compose-prod.yml up -d

            # Optional cleanup
            # docker image prune -af --filter "until=24h"