/* tslint:disable */
/* eslint-disable */
/**
 * BUILD.ING API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Building
 */
export interface Building {
    /**
     * 
     * @type {number}
     * @memberof Building
     */
    'buildingId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Building
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Building
     */
    'address'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Building
     */
    'constructionYear'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Building
     */
    'totalArea'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Building
     */
    'floors'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Building
     */
    'description'?: string | null;
    /**
     * 
     * @type {NpgsqlPoint}
     * @memberof Building
     */
    'coordinates'?: NpgsqlPoint;
    /**
     * 
     * @type {string}
     * @memberof Building
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Building
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Building
     */
    'organizationId'?: number;
    /**
     * 
     * @type {Organization}
     * @memberof Building
     */
    'organization'?: Organization;
    /**
     * 
     * @type {Array<Document>}
     * @memberof Building
     */
    'documents'?: Array<Document> | null;
    /**
     * 
     * @type {Array<BuildingDocumentRelation>}
     * @memberof Building
     */
    'buildingDocumentRelations'?: Array<BuildingDocumentRelation> | null;
}
/**
 * 
 * @export
 * @interface BuildingDocumentRelation
 */
export interface BuildingDocumentRelation {
    /**
     * 
     * @type {number}
     * @memberof BuildingDocumentRelation
     */
    'buildingId'?: number;
    /**
     * 
     * @type {Building}
     * @memberof BuildingDocumentRelation
     */
    'building'?: Building;
    /**
     * 
     * @type {number}
     * @memberof BuildingDocumentRelation
     */
    'documentId'?: number;
    /**
     * 
     * @type {Document}
     * @memberof BuildingDocumentRelation
     */
    'document'?: Document;
    /**
     * 
     * @type {string}
     * @memberof BuildingDocumentRelation
     */
    'relationType'?: string | null;
}
/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    'documentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'filePath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'fileType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    'fileSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    'categoryId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    'buildingId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    'uploadedBy'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'uploadDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'lastModified'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Document
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'metadata'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'uploadedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    'groupId'?: string | null;
    /**
     * 
     * @type {Building}
     * @memberof Document
     */
    'building'?: Building;
    /**
     * 
     * @type {User}
     * @memberof Document
     */
    'uploader'?: User;
    /**
     * 
     * @type {DocumentCategory}
     * @memberof Document
     */
    'category'?: DocumentCategory;
    /**
     * 
     * @type {Array<DocumentTagRelation>}
     * @memberof Document
     */
    'documentTagRelations'?: Array<DocumentTagRelation> | null;
    /**
     * 
     * @type {Array<DocumentPermission>}
     * @memberof Document
     */
    'documentPermissions'?: Array<DocumentPermission> | null;
    /**
     * 
     * @type {Array<BuildingDocumentRelation>}
     * @memberof Document
     */
    'buildingDocumentRelations'?: Array<BuildingDocumentRelation> | null;
}
/**
 * 
 * @export
 * @interface DocumentCategory
 */
export interface DocumentCategory {
    /**
     * 
     * @type {number}
     * @memberof DocumentCategory
     */
    'categoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentCategory
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentCategory
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DocumentCategory
     */
    'parentCategoryId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentCategory
     */
    'createdAt'?: string;
    /**
     * 
     * @type {DocumentCategory}
     * @memberof DocumentCategory
     */
    'parentCategory'?: DocumentCategory;
    /**
     * 
     * @type {Array<DocumentCategory>}
     * @memberof DocumentCategory
     */
    'subCategories'?: Array<DocumentCategory> | null;
    /**
     * 
     * @type {Array<Document>}
     * @memberof DocumentCategory
     */
    'documents'?: Array<Document> | null;
}
/**
 * 
 * @export
 * @interface DocumentPermission
 */
export interface DocumentPermission {
    /**
     * 
     * @type {number}
     * @memberof DocumentPermission
     */
    'documentId'?: number;
    /**
     * 
     * @type {Document}
     * @memberof DocumentPermission
     */
    'document'?: Document;
    /**
     * 
     * @type {number}
     * @memberof DocumentPermission
     */
    'userId'?: number;
    /**
     * 
     * @type {User}
     * @memberof DocumentPermission
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof DocumentPermission
     */
    'permissionType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentPermission
     */
    'grantedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocumentPermission
     */
    'grantedBy'?: number | null;
    /**
     * 
     * @type {User}
     * @memberof DocumentPermission
     */
    'grantedByUser'?: User;
}
/**
 * 
 * @export
 * @interface DocumentTag
 */
export interface DocumentTag {
    /**
     * 
     * @type {number}
     * @memberof DocumentTag
     */
    'tagId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentTag
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentTag
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<DocumentTagRelation>}
     * @memberof DocumentTag
     */
    'documentTagRelations'?: Array<DocumentTagRelation> | null;
}
/**
 * 
 * @export
 * @interface DocumentTagRelation
 */
export interface DocumentTagRelation {
    /**
     * 
     * @type {number}
     * @memberof DocumentTagRelation
     */
    'documentId'?: number;
    /**
     * 
     * @type {Document}
     * @memberof DocumentTagRelation
     */
    'document'?: Document;
    /**
     * 
     * @type {number}
     * @memberof DocumentTagRelation
     */
    'tagId'?: number;
    /**
     * 
     * @type {DocumentTag}
     * @memberof DocumentTagRelation
     */
    'tag'?: DocumentTag;
}
/**
 * Request model for updating document metadata
 * @export
 * @interface DocumentUpdateRequest
 */
export interface DocumentUpdateRequest {
    /**
     * New title of the document
     * @type {string}
     * @memberof DocumentUpdateRequest
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface NpgsqlPoint
 */
export interface NpgsqlPoint {
    /**
     * 
     * @type {number}
     * @memberof NpgsqlPoint
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof NpgsqlPoint
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @interface OllamaRequest
 */
export interface OllamaRequest {
    /**
     * 
     * @type {string}
     * @memberof OllamaRequest
     */
    'prompt'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof OllamaRequest
     */
    'context'?: any | null;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'organizationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {Array<User>}
     * @memberof Organization
     */
    'users'?: Array<User> | null;
    /**
     * 
     * @type {Array<Building>}
     * @memberof Organization
     */
    'buildings'?: Array<Building> | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'organizationId'?: number;
    /**
     * 
     * @type {Organization}
     * @memberof User
     */
    'organization'?: Organization;
    /**
     * 
     * @type {Array<Document>}
     * @memberof User
     */
    'uploadedDocuments'?: Array<Document> | null;
    /**
     * 
     * @type {Array<DocumentPermission>}
     * @memberof User
     */
    'documentPermissions'?: Array<DocumentPermission> | null;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureC'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    'summary'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    'temperatureF'?: number;
}

/**
 * BuildINGApi - axios parameter creator
 * @export
 */
export const BuildINGApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/weatherforecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildINGApi - functional programming interface
 * @export
 */
export const BuildINGApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildINGApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeatherForecast(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeatherForecast(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildINGApi.getWeatherForecast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildINGApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BuildINGApi - factory interface
 * @export
 */
export const BuildINGApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildINGApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeatherForecast(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return localVarFp.getWeatherForecast(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<string> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuildINGApi - object-oriented interface
 * @export
 * @class BuildINGApi
 * @extends {BaseAPI}
 */
export class BuildINGApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildINGApi
     */
    public getWeatherForecast(options?: RawAxiosRequestConfig) {
        return BuildINGApiFp(this.configuration).getWeatherForecast(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildINGApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return BuildINGApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BuildingsApi - axios parameter creator
 * @export
 */
export const BuildingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsDebugDbGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Buildings/debug-db`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsDebugFullGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Buildings/debug-full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Buildings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBuildingsIdDelete', 'id', id)
            const localVarPath = `/api/Buildings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBuildingsIdGet', 'id', id)
            const localVarPath = `/api/Buildings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Building} [building] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsIdPut: async (id: number, building?: Building, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBuildingsIdPut', 'id', id)
            const localVarPath = `/api/Buildings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(building, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Building} [building] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsPost: async (building?: Building, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Buildings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(building, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildingsApi - functional programming interface
 * @export
 */
export const BuildingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsDebugDbGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsDebugDbGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsDebugDbGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsDebugFullGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsDebugFullGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsDebugFullGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Building>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Building>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Building} [building] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsIdPut(id: number, building?: Building, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsIdPut(id, building, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Building} [building] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBuildingsPost(building?: Building, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBuildingsPost(building, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BuildingsApi.apiBuildingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BuildingsApi - factory interface
 * @export
 */
export const BuildingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsDebugDbGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiBuildingsDebugDbGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsDebugFullGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiBuildingsDebugFullGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsGet(options?: any): AxiosPromise<Array<Building>> {
            return localVarFp.apiBuildingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiBuildingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsIdGet(id: number, options?: any): AxiosPromise<Building> {
            return localVarFp.apiBuildingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Building} [building] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsIdPut(id: number, building?: Building, options?: any): AxiosPromise<void> {
            return localVarFp.apiBuildingsIdPut(id, building, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Building} [building] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBuildingsPost(building?: Building, options?: any): AxiosPromise<void> {
            return localVarFp.apiBuildingsPost(building, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuildingsApi - object-oriented interface
 * @export
 * @class BuildingsApi
 * @extends {BaseAPI}
 */
export class BuildingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsDebugDbGet(options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsDebugDbGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsDebugFullGet(options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsDebugFullGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsGet(options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Building} [building] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsIdPut(id: number, building?: Building, options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsIdPut(id, building, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Building} [building] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildingsApi
     */
    public apiBuildingsPost(building?: Building, options?: RawAxiosRequestConfig) {
        return BuildingsApiFp(this.configuration).apiBuildingsPost(building, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update a document (for example: title)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDocumentsIdDelete', 'id', id)
            const localVarPath = `/api/Documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDocumentsIdGet', 'id', id)
            const localVarPath = `/api/Documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DocumentUpdateRequest} [documentUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsIdPut: async (id: number, documentUpdateRequest?: DocumentUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDocumentsIdPut', 'id', id)
            const localVarPath = `/api/Documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uploads a document (PDF, DOCX, etc.)
         * @param {File} [file] The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsPost: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update a document (for example: title)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.apiDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.apiDocumentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.apiDocumentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {DocumentUpdateRequest} [documentUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentsIdPut(id: number, documentUpdateRequest?: DocumentUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentsIdPut(id, documentUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.apiDocumentsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Uploads a document (PDF, DOCX, etc.)
         * @param {File} [file] The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentsPost(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentsPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.apiDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Update a document (for example: title)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiDocumentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiDocumentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsIdGet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiDocumentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {DocumentUpdateRequest} [documentUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsIdPut(id: number, documentUpdateRequest?: DocumentUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiDocumentsIdPut(id, documentUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uploads a document (PDF, DOCX, etc.)
         * @param {File} [file] The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentsPost(file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiDocumentsPost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * 
     * @summary Update a document (for example: title)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public apiDocumentsGet(options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).apiDocumentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public apiDocumentsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).apiDocumentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public apiDocumentsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).apiDocumentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {DocumentUpdateRequest} [documentUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public apiDocumentsIdPut(id: number, documentUpdateRequest?: DocumentUpdateRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).apiDocumentsIdPut(id, documentUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uploads a document (PDF, DOCX, etc.)
     * @param {File} [file] The file to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public apiDocumentsPost(file?: File, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).apiDocumentsPost(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OllamaApi - axios parameter creator
 * @export
 */
export const OllamaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sends prompt to Ollama backend and returns response with metadata.
         * @param {OllamaRequest} [ollamaRequest] Prompt and optional context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOllamaAskPost: async (ollamaRequest?: OllamaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Ollama/ask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ollamaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OllamaApi - functional programming interface
 * @export
 */
export const OllamaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OllamaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sends prompt to Ollama backend and returns response with metadata.
         * @param {OllamaRequest} [ollamaRequest] Prompt and optional context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOllamaAskPost(ollamaRequest?: OllamaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOllamaAskPost(ollamaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OllamaApi.apiOllamaAskPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OllamaApi - factory interface
 * @export
 */
export const OllamaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OllamaApiFp(configuration)
    return {
        /**
         * 
         * @summary Sends prompt to Ollama backend and returns response with metadata.
         * @param {OllamaRequest} [ollamaRequest] Prompt and optional context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOllamaAskPost(ollamaRequest?: OllamaRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiOllamaAskPost(ollamaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OllamaApi - object-oriented interface
 * @export
 * @class OllamaApi
 * @extends {BaseAPI}
 */
export class OllamaApi extends BaseAPI {
    /**
     * 
     * @summary Sends prompt to Ollama backend and returns response with metadata.
     * @param {OllamaRequest} [ollamaRequest] Prompt and optional context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApi
     */
    public apiOllamaAskPost(ollamaRequest?: OllamaRequest, options?: RawAxiosRequestConfig) {
        return OllamaApiFp(this.configuration).apiOllamaAskPost(ollamaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



