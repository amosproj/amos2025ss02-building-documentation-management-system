// <auto-generated />
using System;
using BUILD.ING.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Build.ING.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BUILD.ING.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ConstructionYear")
                        .HasColumnType("integer");

                    b.Property<NpgsqlPoint?>("Coordinates")
                        .HasColumnType("point");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Floors")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BuildingId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("BUILD.ING.Models.BuildingDocumentRelation", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BuildingId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("BuildingDocumentRelations");
                });

            modelBuilder.Entity("BUILD.ING.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("DocumentCategories");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentPermission", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GrantedBy")
                        .HasColumnType("integer");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentId", "UserId");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentPermissions");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("DocumentTags");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentTagRelation", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTagRelations");
                });

            modelBuilder.Entity("BUILD.ING.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganizationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BUILD.ING.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BUILD.ING.Models.Building", b =>
                {
                    b.HasOne("BUILD.ING.Models.Organization", "Organization")
                        .WithMany("Buildings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BUILD.ING.Models.BuildingDocumentRelation", b =>
                {
                    b.HasOne("BUILD.ING.Models.Building", "Building")
                        .WithMany("BuildingDocumentRelations")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BUILD.ING.Models.Document", "Document")
                        .WithMany("BuildingDocumentRelations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("BUILD.ING.Models.Document", b =>
                {
                    b.HasOne("BUILD.ING.Models.Building", "Building")
                        .WithMany("Documents")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BUILD.ING.Models.DocumentCategory", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BUILD.ING.Models.User", "Uploader")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Building");

                    b.Navigation("Category");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentCategory", b =>
                {
                    b.HasOne("BUILD.ING.Models.DocumentCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentPermission", b =>
                {
                    b.HasOne("BUILD.ING.Models.Document", "Document")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BUILD.ING.Models.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BUILD.ING.Models.User", "User")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("GrantedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentTagRelation", b =>
                {
                    b.HasOne("BUILD.ING.Models.Document", "Document")
                        .WithMany("DocumentTagRelations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BUILD.ING.Models.DocumentTag", "Tag")
                        .WithMany("DocumentTagRelations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BUILD.ING.Models.User", b =>
                {
                    b.HasOne("BUILD.ING.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BUILD.ING.Models.Building", b =>
                {
                    b.Navigation("BuildingDocumentRelations");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("BUILD.ING.Models.Document", b =>
                {
                    b.Navigation("BuildingDocumentRelations");

                    b.Navigation("DocumentPermissions");

                    b.Navigation("DocumentTagRelations");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentCategory", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("BUILD.ING.Models.DocumentTag", b =>
                {
                    b.Navigation("DocumentTagRelations");
                });

            modelBuilder.Entity("BUILD.ING.Models.Organization", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BUILD.ING.Models.User", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("UploadedDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
